//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\wellington\projects\lectures\compiler-from-scratch\lectures\MyCompiler\Parser\MyParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Grammar {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="MyParserParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public interface IMyParserListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>programStmt</c>
	/// labeled alternative in <see cref="MyParserParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgramStmt([NotNull] MyParserParser.ProgramStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>programStmt</c>
	/// labeled alternative in <see cref="MyParserParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgramStmt([NotNull] MyParserParser.ProgramStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>stmtPrint</c>
	/// labeled alternative in <see cref="MyParserParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStmtPrint([NotNull] MyParserParser.StmtPrintContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>stmtPrint</c>
	/// labeled alternative in <see cref="MyParserParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStmtPrint([NotNull] MyParserParser.StmtPrintContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>stmtRead</c>
	/// labeled alternative in <see cref="MyParserParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStmtRead([NotNull] MyParserParser.StmtReadContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>stmtRead</c>
	/// labeled alternative in <see cref="MyParserParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStmtRead([NotNull] MyParserParser.StmtReadContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>stmtAttr</c>
	/// labeled alternative in <see cref="MyParserParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStmtAttr([NotNull] MyParserParser.StmtAttrContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>stmtAttr</c>
	/// labeled alternative in <see cref="MyParserParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStmtAttr([NotNull] MyParserParser.StmtAttrContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>stmtCond</c>
	/// labeled alternative in <see cref="MyParserParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStmtCond([NotNull] MyParserParser.StmtCondContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>stmtCond</c>
	/// labeled alternative in <see cref="MyParserParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStmtCond([NotNull] MyParserParser.StmtCondContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ifStmt</c>
	/// labeled alternative in <see cref="MyParserParser.cond"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStmt([NotNull] MyParserParser.IfStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ifStmt</c>
	/// labeled alternative in <see cref="MyParserParser.cond"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStmt([NotNull] MyParserParser.IfStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ifElseStmt</c>
	/// labeled alternative in <see cref="MyParserParser.cond"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfElseStmt([NotNull] MyParserParser.IfElseStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ifElseStmt</c>
	/// labeled alternative in <see cref="MyParserParser.cond"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfElseStmt([NotNull] MyParserParser.IfElseStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>condExpresion</c>
	/// labeled alternative in <see cref="MyParserParser.condExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCondExpresion([NotNull] MyParserParser.CondExpresionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>condExpresion</c>
	/// labeled alternative in <see cref="MyParserParser.condExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCondExpresion([NotNull] MyParserParser.CondExpresionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>condRelOp</c>
	/// labeled alternative in <see cref="MyParserParser.condExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCondRelOp([NotNull] MyParserParser.CondRelOpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>condRelOp</c>
	/// labeled alternative in <see cref="MyParserParser.condExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCondRelOp([NotNull] MyParserParser.CondRelOpContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>blockStmt</c>
	/// labeled alternative in <see cref="MyParserParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlockStmt([NotNull] MyParserParser.BlockStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>blockStmt</c>
	/// labeled alternative in <see cref="MyParserParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlockStmt([NotNull] MyParserParser.BlockStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>printStr</c>
	/// labeled alternative in <see cref="MyParserParser.print"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrintStr([NotNull] MyParserParser.PrintStrContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>printStr</c>
	/// labeled alternative in <see cref="MyParserParser.print"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrintStr([NotNull] MyParserParser.PrintStrContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>printExpr</c>
	/// labeled alternative in <see cref="MyParserParser.print"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrintExpr([NotNull] MyParserParser.PrintExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>printExpr</c>
	/// labeled alternative in <see cref="MyParserParser.print"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrintExpr([NotNull] MyParserParser.PrintExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>readVar</c>
	/// labeled alternative in <see cref="MyParserParser.read"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReadVar([NotNull] MyParserParser.ReadVarContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>readVar</c>
	/// labeled alternative in <see cref="MyParserParser.read"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReadVar([NotNull] MyParserParser.ReadVarContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>attrExpr</c>
	/// labeled alternative in <see cref="MyParserParser.attr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAttrExpr([NotNull] MyParserParser.AttrExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>attrExpr</c>
	/// labeled alternative in <see cref="MyParserParser.attr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAttrExpr([NotNull] MyParserParser.AttrExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>exprPlus</c>
	/// labeled alternative in <see cref="MyParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprPlus([NotNull] MyParserParser.ExprPlusContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprPlus</c>
	/// labeled alternative in <see cref="MyParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprPlus([NotNull] MyParserParser.ExprPlusContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>exprMinus</c>
	/// labeled alternative in <see cref="MyParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprMinus([NotNull] MyParserParser.ExprMinusContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprMinus</c>
	/// labeled alternative in <see cref="MyParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprMinus([NotNull] MyParserParser.ExprMinusContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expr1Empty</c>
	/// labeled alternative in <see cref="MyParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr1Empty([NotNull] MyParserParser.Expr1EmptyContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expr1Empty</c>
	/// labeled alternative in <see cref="MyParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr1Empty([NotNull] MyParserParser.Expr1EmptyContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expr1Mult</c>
	/// labeled alternative in <see cref="MyParserParser.expr1"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr1Mult([NotNull] MyParserParser.Expr1MultContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expr1Mult</c>
	/// labeled alternative in <see cref="MyParserParser.expr1"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr1Mult([NotNull] MyParserParser.Expr1MultContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expr1Div</c>
	/// labeled alternative in <see cref="MyParserParser.expr1"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr1Div([NotNull] MyParserParser.Expr1DivContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expr1Div</c>
	/// labeled alternative in <see cref="MyParserParser.expr1"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr1Div([NotNull] MyParserParser.Expr1DivContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expr2Empty</c>
	/// labeled alternative in <see cref="MyParserParser.expr1"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr2Empty([NotNull] MyParserParser.Expr2EmptyContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expr2Empty</c>
	/// labeled alternative in <see cref="MyParserParser.expr1"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr2Empty([NotNull] MyParserParser.Expr2EmptyContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expr2Par</c>
	/// labeled alternative in <see cref="MyParserParser.expr2"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr2Par([NotNull] MyParserParser.Expr2ParContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expr2Par</c>
	/// labeled alternative in <see cref="MyParserParser.expr2"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr2Par([NotNull] MyParserParser.Expr2ParContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expr2Num</c>
	/// labeled alternative in <see cref="MyParserParser.expr2"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr2Num([NotNull] MyParserParser.Expr2NumContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expr2Num</c>
	/// labeled alternative in <see cref="MyParserParser.expr2"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr2Num([NotNull] MyParserParser.Expr2NumContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expr2Var</c>
	/// labeled alternative in <see cref="MyParserParser.expr2"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr2Var([NotNull] MyParserParser.Expr2VarContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expr2Var</c>
	/// labeled alternative in <see cref="MyParserParser.expr2"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr2Var([NotNull] MyParserParser.Expr2VarContext context);
}
} // namespace Grammar
