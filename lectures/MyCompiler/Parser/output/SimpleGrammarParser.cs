//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\wellington\projects\lectures\compiler-from-scratch\lectures\MyCompiler\Parser\SimpleGrammar.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Grammar {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class SimpleGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		EQ=1, EOL=2, OPEN=3, CLOSE=4, MOD=5, DIV=6, MUL=7, SUB=8, ADD=9, PRINT=10, 
		READ=11, NUM=12, VAR=13, COMMENTS=14, WS=15;
	public const int
		RULE_prog = 0, RULE_line = 1, RULE_atrib = 2, RULE_read = 3, RULE_print = 4, 
		RULE_expr = 5, RULE_term = 6, RULE_fact = 7;
	public static readonly string[] ruleNames = {
		"prog", "line", "atrib", "read", "print", "expr", "term", "fact"
	};

	private static readonly string[] _LiteralNames = {
		null, "'='", "';'", "'('", "')'", "'%'", "'/'", "'*'", "'-'", "'+'", "'print'", 
		"'read'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "EQ", "EOL", "OPEN", "CLOSE", "MOD", "DIV", "MUL", "SUB", "ADD", 
		"PRINT", "READ", "NUM", "VAR", "COMMENTS", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SimpleGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SimpleGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SimpleGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SimpleGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleGrammarVisitor<TResult> typedVisitor = visitor as ISimpleGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 17;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 16; line();
				}
				}
				State = 19;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PRINT) | (1L << READ) | (1L << VAR))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public AtribContext atrib() {
			return GetRuleContext<AtribContext>(0);
		}
		public PrintContext print() {
			return GetRuleContext<PrintContext>(0);
		}
		public ReadContext read() {
			return GetRuleContext<ReadContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleGrammarVisitor<TResult> typedVisitor = visitor as ISimpleGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 2, RULE_line);
		try {
			State = 24;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 21; atrib();
				}
				break;
			case PRINT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 22; print();
				}
				break;
			case READ:
				EnterOuterAlt(_localctx, 3);
				{
				State = 23; read();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtribContext : ParserRuleContext {
		public ITerminalNode VAR() { return GetToken(SimpleGrammarParser.VAR, 0); }
		public ITerminalNode EQ() { return GetToken(SimpleGrammarParser.EQ, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AtribContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atrib; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.EnterAtrib(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.ExitAtrib(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleGrammarVisitor<TResult> typedVisitor = visitor as ISimpleGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtrib(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtribContext atrib() {
		AtribContext _localctx = new AtribContext(Context, State);
		EnterRule(_localctx, 4, RULE_atrib);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26; Match(VAR);
			State = 27; Match(EQ);
			State = 28; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadContext : ParserRuleContext {
		public ITerminalNode READ() { return GetToken(SimpleGrammarParser.READ, 0); }
		public ITerminalNode VAR() { return GetToken(SimpleGrammarParser.VAR, 0); }
		public ReadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_read; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.EnterRead(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.ExitRead(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleGrammarVisitor<TResult> typedVisitor = visitor as ISimpleGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReadContext read() {
		ReadContext _localctx = new ReadContext(Context, State);
		EnterRule(_localctx, 6, RULE_read);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30; Match(READ);
			State = 31; Match(VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintContext : ParserRuleContext {
		public ITerminalNode PRINT() { return GetToken(SimpleGrammarParser.PRINT, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode VAR() { return GetToken(SimpleGrammarParser.VAR, 0); }
		public PrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.EnterPrint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.ExitPrint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleGrammarVisitor<TResult> typedVisitor = visitor as ISimpleGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintContext print() {
		PrintContext _localctx = new PrintContext(Context, State);
		EnterRule(_localctx, 8, RULE_print);
		try {
			State = 37;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 33; Match(PRINT);
				State = 34; expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 35; Match(PRINT);
				State = 36; Match(VAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext e1;
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ITerminalNode ADD() { return GetToken(SimpleGrammarParser.ADD, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleGrammarVisitor<TResult> typedVisitor = visitor as ISimpleGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 10, RULE_expr);
		try {
			State = 44;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 39; term();
				State = 40; Match(ADD);
				State = 41; _localctx.e1 = expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 43; term();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public TermContext t1;
		public FactContext fact() {
			return GetRuleContext<FactContext>(0);
		}
		public ITerminalNode MUL() { return GetToken(SimpleGrammarParser.MUL, 0); }
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleGrammarVisitor<TResult> typedVisitor = visitor as ISimpleGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 12, RULE_term);
		try {
			State = 51;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 46; fact();
				State = 47; Match(MUL);
				State = 48; _localctx.t1 = term();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 50; fact();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactContext : ParserRuleContext {
		public FactContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fact; } }
	 
		public FactContext() { }
		public virtual void CopyFrom(FactContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FactNumContext : FactContext {
		public ITerminalNode NUM() { return GetToken(SimpleGrammarParser.NUM, 0); }
		public FactNumContext(FactContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.EnterFactNum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.ExitFactNum(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleGrammarVisitor<TResult> typedVisitor = visitor as ISimpleGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactNum(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FactVarContext : FactContext {
		public ITerminalNode VAR() { return GetToken(SimpleGrammarParser.VAR, 0); }
		public FactVarContext(FactContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.EnterFactVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.ExitFactVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleGrammarVisitor<TResult> typedVisitor = visitor as ISimpleGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactVar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FactExprContext : FactContext {
		public ITerminalNode OPEN() { return GetToken(SimpleGrammarParser.OPEN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(SimpleGrammarParser.CLOSE, 0); }
		public FactExprContext(FactContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.EnterFactExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.ExitFactExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleGrammarVisitor<TResult> typedVisitor = visitor as ISimpleGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactContext fact() {
		FactContext _localctx = new FactContext(Context, State);
		EnterRule(_localctx, 14, RULE_fact);
		try {
			State = 59;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUM:
				_localctx = new FactNumContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 53; Match(NUM);
				}
				break;
			case VAR:
				_localctx = new FactVarContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 54; Match(VAR);
				}
				break;
			case OPEN:
				_localctx = new FactExprContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 55; Match(OPEN);
				State = 56; expr();
				State = 57; Match(CLOSE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x11', '@', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x3', '\x2', '\x6', '\x2', '\x14', '\n', '\x2', 
		'\r', '\x2', '\xE', '\x2', '\x15', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x5', '\x3', '\x1B', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 
		'(', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x5', '\a', '/', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x36', '\n', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x5', '\t', '>', '\n', '\t', '\x3', '\t', '\x2', '\x2', '\n', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x2', '\x2', '\x2', '?', 
		'\x2', '\x13', '\x3', '\x2', '\x2', '\x2', '\x4', '\x1A', '\x3', '\x2', 
		'\x2', '\x2', '\x6', '\x1C', '\x3', '\x2', '\x2', '\x2', '\b', ' ', '\x3', 
		'\x2', '\x2', '\x2', '\n', '\'', '\x3', '\x2', '\x2', '\x2', '\f', '.', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'\x10', '=', '\x3', '\x2', '\x2', '\x2', '\x12', '\x14', '\x5', '\x4', 
		'\x3', '\x2', '\x13', '\x12', '\x3', '\x2', '\x2', '\x2', '\x14', '\x15', 
		'\x3', '\x2', '\x2', '\x2', '\x15', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\x15', '\x16', '\x3', '\x2', '\x2', '\x2', '\x16', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '\x17', '\x1B', '\x5', '\x6', '\x4', '\x2', '\x18', '\x1B', 
		'\x5', '\n', '\x6', '\x2', '\x19', '\x1B', '\x5', '\b', '\x5', '\x2', 
		'\x1A', '\x17', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x18', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\x19', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\x1D', '\a', '\xF', '\x2', '\x2', 
		'\x1D', '\x1E', '\a', '\x3', '\x2', '\x2', '\x1E', '\x1F', '\x5', '\f', 
		'\a', '\x2', '\x1F', '\a', '\x3', '\x2', '\x2', '\x2', ' ', '!', '\a', 
		'\r', '\x2', '\x2', '!', '\"', '\a', '\xF', '\x2', '\x2', '\"', '\t', 
		'\x3', '\x2', '\x2', '\x2', '#', '$', '\a', '\f', '\x2', '\x2', '$', '(', 
		'\x5', '\f', '\a', '\x2', '%', '&', '\a', '\f', '\x2', '\x2', '&', '(', 
		'\a', '\xF', '\x2', '\x2', '\'', '#', '\x3', '\x2', '\x2', '\x2', '\'', 
		'%', '\x3', '\x2', '\x2', '\x2', '(', '\v', '\x3', '\x2', '\x2', '\x2', 
		')', '*', '\x5', '\xE', '\b', '\x2', '*', '+', '\a', '\v', '\x2', '\x2', 
		'+', ',', '\x5', '\f', '\a', '\x2', ',', '/', '\x3', '\x2', '\x2', '\x2', 
		'-', '/', '\x5', '\xE', '\b', '\x2', '.', ')', '\x3', '\x2', '\x2', '\x2', 
		'.', '-', '\x3', '\x2', '\x2', '\x2', '/', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\x30', '\x31', '\x5', '\x10', '\t', '\x2', '\x31', '\x32', '\a', 
		'\t', '\x2', '\x2', '\x32', '\x33', '\x5', '\xE', '\b', '\x2', '\x33', 
		'\x36', '\x3', '\x2', '\x2', '\x2', '\x34', '\x36', '\x5', '\x10', '\t', 
		'\x2', '\x35', '\x30', '\x3', '\x2', '\x2', '\x2', '\x35', '\x34', '\x3', 
		'\x2', '\x2', '\x2', '\x36', '\xF', '\x3', '\x2', '\x2', '\x2', '\x37', 
		'>', '\a', '\xE', '\x2', '\x2', '\x38', '>', '\a', '\xF', '\x2', '\x2', 
		'\x39', ':', '\a', '\x5', '\x2', '\x2', ':', ';', '\x5', '\f', '\a', '\x2', 
		';', '<', '\a', '\x6', '\x2', '\x2', '<', '>', '\x3', '\x2', '\x2', '\x2', 
		'=', '\x37', '\x3', '\x2', '\x2', '\x2', '=', '\x38', '\x3', '\x2', '\x2', 
		'\x2', '=', '\x39', '\x3', '\x2', '\x2', '\x2', '>', '\x11', '\x3', '\x2', 
		'\x2', '\x2', '\b', '\x15', '\x1A', '\'', '.', '\x35', '=',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Grammar
