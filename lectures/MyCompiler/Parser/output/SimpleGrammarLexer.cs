//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\wellington\projects\lectures\compiler-from-scratch\lectures\MyCompiler\Parser\SimpleGrammar.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Grammar {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class SimpleGrammarLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		EQ=1, EOL=2, OPEN=3, CLOSE=4, MOD=5, DIV=6, MUL=7, SUB=8, ADD=9, PRINT=10, 
		READ=11, NUM=12, VAR=13, COMMENTS=14, WS=15;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"EQ", "EOL", "OPEN", "CLOSE", "MOD", "DIV", "MUL", "SUB", "ADD", "PRINT", 
		"READ", "NUM", "VAR", "COMMENTS", "WS"
	};


	public SimpleGrammarLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public SimpleGrammarLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'='", "';'", "'('", "')'", "'%'", "'/'", "'*'", "'-'", "'+'", "'print'", 
		"'read'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "EQ", "EOL", "OPEN", "CLOSE", "MOD", "DIV", "MUL", "SUB", "ADD", 
		"PRINT", "READ", "NUM", "VAR", "COMMENTS", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SimpleGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SimpleGrammarLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x11', 'W', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\r', '\x6', '\r', '@', '\n', '\r', '\r', 
		'\r', '\xE', '\r', '\x41', '\x3', '\xE', '\x6', '\xE', '\x45', '\n', '\xE', 
		'\r', '\xE', '\xE', '\xE', '\x46', '\x3', '\xF', '\x3', '\xF', '\x6', 
		'\xF', 'K', '\n', '\xF', '\r', '\xF', '\xE', '\xF', 'L', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\x10', '\x6', '\x10', 'R', '\n', '\x10', '\r', '\x10', 
		'\xE', '\x10', 'S', '\x3', '\x10', '\x3', '\x10', '\x2', '\x2', '\x11', 
		'\x3', '\x3', '\x5', '\x4', '\a', '\x5', '\t', '\x6', '\v', '\a', '\r', 
		'\b', '\xF', '\t', '\x11', '\n', '\x13', '\v', '\x15', '\f', '\x17', '\r', 
		'\x19', '\xE', '\x1B', '\xF', '\x1D', '\x10', '\x1F', '\x11', '\x3', '\x2', 
		'\x6', '\x3', '\x2', '\x32', ';', '\x4', '\x2', '\x43', '\\', '\x63', 
		'|', '\x5', '\x2', '\f', '\f', '\xF', '\xF', '\x80', '\x80', '\x5', '\x2', 
		'\v', '\f', '\xF', '\xF', '\"', '\"', '\x2', 'Z', '\x2', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x5', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\x2', '\t', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\v', '\x3', '\x2', '\x2', '\x2', '\x2', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\xF', '\x3', '\x2', '\x2', '\x2', '\x2', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x13', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x2', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x19', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\x3', '!', '\x3', '\x2', '\x2', '\x2', 
		'\x5', '#', '\x3', '\x2', '\x2', '\x2', '\a', '%', '\x3', '\x2', '\x2', 
		'\x2', '\t', '\'', '\x3', '\x2', '\x2', '\x2', '\v', ')', '\x3', '\x2', 
		'\x2', '\x2', '\r', '+', '\x3', '\x2', '\x2', '\x2', '\xF', '-', '\x3', 
		'\x2', '\x2', '\x2', '\x11', '/', '\x3', '\x2', '\x2', '\x2', '\x13', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x15', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x17', '\x39', '\x3', '\x2', '\x2', '\x2', '\x19', '?', '\x3', 
		'\x2', '\x2', '\x2', '\x1B', '\x44', '\x3', '\x2', '\x2', '\x2', '\x1D', 
		'H', '\x3', '\x2', '\x2', '\x2', '\x1F', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'!', '\"', '\a', '?', '\x2', '\x2', '\"', '\x4', '\x3', '\x2', '\x2', 
		'\x2', '#', '$', '\a', '=', '\x2', '\x2', '$', '\x6', '\x3', '\x2', '\x2', 
		'\x2', '%', '&', '\a', '*', '\x2', '\x2', '&', '\b', '\x3', '\x2', '\x2', 
		'\x2', '\'', '(', '\a', '+', '\x2', '\x2', '(', '\n', '\x3', '\x2', '\x2', 
		'\x2', ')', '*', '\a', '\'', '\x2', '\x2', '*', '\f', '\x3', '\x2', '\x2', 
		'\x2', '+', ',', '\a', '\x31', '\x2', '\x2', ',', '\xE', '\x3', '\x2', 
		'\x2', '\x2', '-', '.', '\a', ',', '\x2', '\x2', '.', '\x10', '\x3', '\x2', 
		'\x2', '\x2', '/', '\x30', '\a', '/', '\x2', '\x2', '\x30', '\x12', '\x3', 
		'\x2', '\x2', '\x2', '\x31', '\x32', '\a', '-', '\x2', '\x2', '\x32', 
		'\x14', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\a', 'r', '\x2', 
		'\x2', '\x34', '\x35', '\a', 't', '\x2', '\x2', '\x35', '\x36', '\a', 
		'k', '\x2', '\x2', '\x36', '\x37', '\a', 'p', '\x2', '\x2', '\x37', '\x38', 
		'\a', 'v', '\x2', '\x2', '\x38', '\x16', '\x3', '\x2', '\x2', '\x2', '\x39', 
		':', '\a', 't', '\x2', '\x2', ':', ';', '\a', 'g', '\x2', '\x2', ';', 
		'<', '\a', '\x63', '\x2', '\x2', '<', '=', '\a', '\x66', '\x2', '\x2', 
		'=', '\x18', '\x3', '\x2', '\x2', '\x2', '>', '@', '\t', '\x2', '\x2', 
		'\x2', '?', '>', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\x3', '\x2', 
		'\x2', '\x2', '\x41', '?', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x1A', '\x3', '\x2', '\x2', '\x2', 
		'\x43', '\x45', '\t', '\x3', '\x2', '\x2', '\x44', '\x43', '\x3', '\x2', 
		'\x2', '\x2', '\x45', '\x46', '\x3', '\x2', '\x2', '\x2', '\x46', '\x44', 
		'\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\x3', '\x2', '\x2', '\x2', 'G', 
		'\x1C', '\x3', '\x2', '\x2', '\x2', 'H', 'J', '\a', '%', '\x2', '\x2', 
		'I', 'K', '\t', '\x4', '\x2', '\x2', 'J', 'I', '\x3', '\x2', '\x2', '\x2', 
		'K', 'L', '\x3', '\x2', '\x2', '\x2', 'L', 'J', '\x3', '\x2', '\x2', '\x2', 
		'L', 'M', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\x3', '\x2', '\x2', '\x2', 
		'N', 'O', '\b', '\xF', '\x2', '\x2', 'O', '\x1E', '\x3', '\x2', '\x2', 
		'\x2', 'P', 'R', '\t', '\x5', '\x2', '\x2', 'Q', 'P', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'S', '\x3', '\x2', '\x2', '\x2', 'S', 'Q', '\x3', '\x2', '\x2', 
		'\x2', 'S', 'T', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\x3', '\x2', '\x2', 
		'\x2', 'U', 'V', '\b', '\x10', '\x2', '\x2', 'V', ' ', '\x3', '\x2', '\x2', 
		'\x2', '\a', '\x2', '\x41', '\x46', 'L', 'S', '\x3', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Grammar
