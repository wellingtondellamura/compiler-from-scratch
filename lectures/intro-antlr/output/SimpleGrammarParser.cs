//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\wellington\projects\lectures\compiler-from-scratch\lectures\intro-antlr\SimpleGrammar.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Grammar {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class SimpleGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		PRINT=1, SCAN=2, FUNC=3, IF=4, ELSE=5, FOR=6, WHILE=7, STRING=8, INT=9, 
		FLOAT=10, CHAR=11, TYPE=12, MATH=13, FLOOR=14, CEIL=15, SQRT=16, POT=17, 
		FMAX=18, FMIN=19, RINT=20, PONT=21, OPEN=22, CLOSE=23, OPENB=24, CLOSEB=25, 
		SUM=26, SUB=27, MULT=28, DIV=29, MOD=30, COMA=31, EOL=32, EQUAL=33, DEQUAL=34, 
		DSUM=35, DSUB=36, BIGGER=37, SMALLER=38, BEQUAL=39, SMEQUAL=40, NEQUAL=41, 
		AND=42, OR=43, NUM=44, VAR=45, COMMENT=46, LINE_COMMENT=47, WS=48;
	public const int
		RULE_prog = 0, RULE_line = 1, RULE_code = 2, RULE_element = 3, RULE_output = 4, 
		RULE_show = 5, RULE_follow = 6, RULE_tipo = 7, RULE_equals = 8, RULE_cont = 9, 
		RULE_expr = 10, RULE_rest = 11, RULE_fact = 12, RULE_more = 13, RULE_term = 14, 
		RULE_uif = 15, RULE_condition = 16, RULE_comp = 17, RULE_other = 18, RULE_uelse = 19, 
		RULE_uwhile = 20, RULE_ufor = 21, RULE_decl = 22, RULE_incr = 23, RULE_function = 24, 
		RULE_par = 25, RULE_cfunction = 26, RULE_cpar = 27, RULE_input = 28, RULE_value = 29, 
		RULE_umath = 30, RULE_mathpar = 31, RULE_floor = 32, RULE_ceil = 33, RULE_sqrt = 34, 
		RULE_pot = 35, RULE_fmax = 36, RULE_fmin = 37, RULE_rint = 38;
	public static readonly string[] ruleNames = {
		"prog", "line", "code", "element", "output", "show", "follow", "tipo", 
		"equals", "cont", "expr", "rest", "fact", "more", "term", "uif", "condition", 
		"comp", "other", "uelse", "uwhile", "ufor", "decl", "incr", "function", 
		"par", "cfunction", "cpar", "input", "value", "umath", "mathpar", "floor", 
		"ceil", "sqrt", "pot", "fmax", "fmin", "rint"
	};

	private static readonly string[] _LiteralNames = {
		null, "'print'", "'scan'", "'func'", "'if'", "'else'", "'for'", "'while'", 
		"'string'", "'int'", "'float'", "'char'", "'type'", "'math'", "'floor'", 
		"'ceil'", "'sqrt'", "'pot'", "'fmax'", "'fmin'", "'rint'", "'.'", "'('", 
		"')'", "'{'", "'}'", "'+'", "'-'", "'*'", "'/'", "'%'", "','", "';'", 
		"'='", "'=='", "'+='", "'-='", "'>'", "'<'", "'>='", "'<='", "'!='", "'&&'", 
		"'||'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "PRINT", "SCAN", "FUNC", "IF", "ELSE", "FOR", "WHILE", "STRING", 
		"INT", "FLOAT", "CHAR", "TYPE", "MATH", "FLOOR", "CEIL", "SQRT", "POT", 
		"FMAX", "FMIN", "RINT", "PONT", "OPEN", "CLOSE", "OPENB", "CLOSEB", "SUM", 
		"SUB", "MULT", "DIV", "MOD", "COMA", "EOL", "EQUAL", "DEQUAL", "DSUM", 
		"DSUB", "BIGGER", "SMALLER", "BEQUAL", "SMEQUAL", "NEQUAL", "AND", "OR", 
		"NUM", "VAR", "COMMENT", "LINE_COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SimpleGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SimpleGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SimpleGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SimpleGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		public CodeContext code() {
			return GetRuleContext<CodeContext>(0);
		}
		public ITerminalNode EOL() { return GetToken(SimpleGrammarParser.EOL, 0); }
		public LineContext line() {
			return GetRuleContext<LineContext>(0);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleGrammarVisitor<TResult> typedVisitor = visitor as ISimpleGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78; code();
			State = 79; Match(EOL);
			State = 80; line();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public ProgContext prog() {
			return GetRuleContext<ProgContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleGrammarVisitor<TResult> typedVisitor = visitor as ISimpleGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 2, RULE_line);
		try {
			State = 84;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRINT:
			case IF:
			case TYPE:
			case VAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 82; prog();
				}
				break;
			case CLOSEB:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeContext : ParserRuleContext {
		public ElementContext element() {
			return GetRuleContext<ElementContext>(0);
		}
		public OutputContext output() {
			return GetRuleContext<OutputContext>(0);
		}
		public UifContext uif() {
			return GetRuleContext<UifContext>(0);
		}
		public CodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.EnterCode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.ExitCode(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleGrammarVisitor<TResult> typedVisitor = visitor as ISimpleGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeContext code() {
		CodeContext _localctx = new CodeContext(Context, State);
		EnterRule(_localctx, 4, RULE_code);
		try {
			State = 89;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPE:
			case VAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 86; element();
				}
				break;
			case PRINT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 87; output();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 3);
				{
				State = 88; uif();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : ParserRuleContext {
		public TipoContext tipo() {
			return GetRuleContext<TipoContext>(0);
		}
		public ITerminalNode VAR() { return GetToken(SimpleGrammarParser.VAR, 0); }
		public EqualsContext equals() {
			return GetRuleContext<EqualsContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ContContext cont() {
			return GetRuleContext<ContContext>(0);
		}
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.EnterElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.ExitElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleGrammarVisitor<TResult> typedVisitor = visitor as ISimpleGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(Context, State);
		EnterRule(_localctx, 6, RULE_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91; tipo();
			State = 92; Match(VAR);
			State = 93; equals();
			State = 94; expr();
			State = 95; cont();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputContext : ParserRuleContext {
		public ITerminalNode PRINT() { return GetToken(SimpleGrammarParser.PRINT, 0); }
		public ITerminalNode OPEN() { return GetToken(SimpleGrammarParser.OPEN, 0); }
		public ShowContext show() {
			return GetRuleContext<ShowContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(SimpleGrammarParser.CLOSE, 0); }
		public OutputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.EnterOutput(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.ExitOutput(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleGrammarVisitor<TResult> typedVisitor = visitor as ISimpleGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputContext output() {
		OutputContext _localctx = new OutputContext(Context, State);
		EnterRule(_localctx, 8, RULE_output);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97; Match(PRINT);
			State = 98; Match(OPEN);
			State = 99; show();
			State = 100; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(SimpleGrammarParser.STRING, 0); }
		public FollowContext follow() {
			return GetRuleContext<FollowContext>(0);
		}
		public ITerminalNode VAR() { return GetToken(SimpleGrammarParser.VAR, 0); }
		public ShowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_show; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.EnterShow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.ExitShow(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleGrammarVisitor<TResult> typedVisitor = visitor as ISimpleGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowContext show() {
		ShowContext _localctx = new ShowContext(Context, State);
		EnterRule(_localctx, 10, RULE_show);
		try {
			State = 106;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 102; Match(STRING);
				State = 103; follow();
				}
				break;
			case VAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 104; Match(VAR);
				State = 105; follow();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FollowContext : ParserRuleContext {
		public ITerminalNode SUM() { return GetToken(SimpleGrammarParser.SUM, 0); }
		public ITerminalNode STRING() { return GetToken(SimpleGrammarParser.STRING, 0); }
		public FollowContext follow() {
			return GetRuleContext<FollowContext>(0);
		}
		public ITerminalNode VAR() { return GetToken(SimpleGrammarParser.VAR, 0); }
		public FollowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_follow; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.EnterFollow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.ExitFollow(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleGrammarVisitor<TResult> typedVisitor = visitor as ISimpleGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFollow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FollowContext follow() {
		FollowContext _localctx = new FollowContext(Context, State);
		EnterRule(_localctx, 12, RULE_follow);
		try {
			State = 115;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 108; Match(SUM);
				State = 109; Match(STRING);
				State = 110; follow();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 111; Match(SUM);
				State = 112; Match(VAR);
				State = 113; follow();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TipoContext : ParserRuleContext {
		public ITerminalNode TYPE() { return GetToken(SimpleGrammarParser.TYPE, 0); }
		public TipoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tipo; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.EnterTipo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.ExitTipo(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleGrammarVisitor<TResult> typedVisitor = visitor as ISimpleGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTipo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TipoContext tipo() {
		TipoContext _localctx = new TipoContext(Context, State);
		EnterRule(_localctx, 14, RULE_tipo);
		try {
			State = 119;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 117; Match(TYPE);
				}
				break;
			case VAR:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualsContext : ParserRuleContext {
		public ITerminalNode EQUAL() { return GetToken(SimpleGrammarParser.EQUAL, 0); }
		public EqualsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equals; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.EnterEquals(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.ExitEquals(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleGrammarVisitor<TResult> typedVisitor = visitor as ISimpleGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquals(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualsContext equals() {
		EqualsContext _localctx = new EqualsContext(Context, State);
		EnterRule(_localctx, 16, RULE_equals);
		try {
			State = 123;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EQUAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 121; Match(EQUAL);
				}
				break;
			case SCAN:
			case FUNC:
			case MATH:
			case OPEN:
			case CLOSEB:
			case COMA:
			case EOL:
			case NUM:
			case VAR:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContContext : ParserRuleContext {
		public ITerminalNode COMA() { return GetToken(SimpleGrammarParser.COMA, 0); }
		public ElementContext element() {
			return GetRuleContext<ElementContext>(0);
		}
		public ContContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cont; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.EnterCont(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.ExitCont(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleGrammarVisitor<TResult> typedVisitor = visitor as ISimpleGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCont(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContContext cont() {
		ContContext _localctx = new ContContext(Context, State);
		EnterRule(_localctx, 18, RULE_cont);
		try {
			State = 128;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMA:
				EnterOuterAlt(_localctx, 1);
				{
				State = 125; Match(COMA);
				State = 126; element();
				}
				break;
			case CLOSEB:
			case EOL:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public FactContext fact() {
			return GetRuleContext<FactContext>(0);
		}
		public RestContext rest() {
			return GetRuleContext<RestContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleGrammarVisitor<TResult> typedVisitor = visitor as ISimpleGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 20, RULE_expr);
		try {
			State = 134;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SCAN:
			case FUNC:
			case MATH:
			case OPEN:
			case NUM:
			case VAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 130; fact();
				State = 131; rest();
				}
				break;
			case CLOSE:
			case CLOSEB:
			case COMA:
			case EOL:
			case DEQUAL:
			case BIGGER:
			case SMALLER:
			case BEQUAL:
			case SMEQUAL:
			case NEQUAL:
			case AND:
			case OR:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RestContext : ParserRuleContext {
		public ITerminalNode SUM() { return GetToken(SimpleGrammarParser.SUM, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode SUB() { return GetToken(SimpleGrammarParser.SUB, 0); }
		public RestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rest; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.EnterRest(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.ExitRest(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleGrammarVisitor<TResult> typedVisitor = visitor as ISimpleGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RestContext rest() {
		RestContext _localctx = new RestContext(Context, State);
		EnterRule(_localctx, 22, RULE_rest);
		try {
			State = 141;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SUM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 136; Match(SUM);
				State = 137; expr();
				}
				break;
			case SUB:
				EnterOuterAlt(_localctx, 2);
				{
				State = 138; Match(SUB);
				State = 139; expr();
				}
				break;
			case CLOSE:
			case CLOSEB:
			case COMA:
			case EOL:
			case DEQUAL:
			case BIGGER:
			case SMALLER:
			case BEQUAL:
			case SMEQUAL:
			case NEQUAL:
			case AND:
			case OR:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactContext : ParserRuleContext {
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public MoreContext more() {
			return GetRuleContext<MoreContext>(0);
		}
		public FactContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fact; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.EnterFact(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.ExitFact(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleGrammarVisitor<TResult> typedVisitor = visitor as ISimpleGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFact(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactContext fact() {
		FactContext _localctx = new FactContext(Context, State);
		EnterRule(_localctx, 24, RULE_fact);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143; term();
			State = 144; more();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoreContext : ParserRuleContext {
		public ITerminalNode MULT() { return GetToken(SimpleGrammarParser.MULT, 0); }
		public FactContext fact() {
			return GetRuleContext<FactContext>(0);
		}
		public ITerminalNode DIV() { return GetToken(SimpleGrammarParser.DIV, 0); }
		public MoreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_more; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.EnterMore(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.ExitMore(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleGrammarVisitor<TResult> typedVisitor = visitor as ISimpleGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMore(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MoreContext more() {
		MoreContext _localctx = new MoreContext(Context, State);
		EnterRule(_localctx, 26, RULE_more);
		try {
			State = 151;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MULT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 146; Match(MULT);
				State = 147; fact();
				}
				break;
			case DIV:
				EnterOuterAlt(_localctx, 2);
				{
				State = 148; Match(DIV);
				State = 149; fact();
				}
				break;
			case CLOSE:
			case CLOSEB:
			case SUM:
			case SUB:
			case COMA:
			case EOL:
			case DEQUAL:
			case BIGGER:
			case SMALLER:
			case BEQUAL:
			case SMEQUAL:
			case NEQUAL:
			case AND:
			case OR:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(SimpleGrammarParser.OPEN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(SimpleGrammarParser.CLOSE, 0); }
		public ITerminalNode NUM() { return GetToken(SimpleGrammarParser.NUM, 0); }
		public ITerminalNode VAR() { return GetToken(SimpleGrammarParser.VAR, 0); }
		public CfunctionContext cfunction() {
			return GetRuleContext<CfunctionContext>(0);
		}
		public InputContext input() {
			return GetRuleContext<InputContext>(0);
		}
		public UmathContext umath() {
			return GetRuleContext<UmathContext>(0);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleGrammarVisitor<TResult> typedVisitor = visitor as ISimpleGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 28, RULE_term);
		try {
			State = 162;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 153; Match(OPEN);
				State = 154; expr();
				State = 155; Match(CLOSE);
				}
				break;
			case NUM:
				EnterOuterAlt(_localctx, 2);
				{
				State = 157; Match(NUM);
				}
				break;
			case VAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 158; Match(VAR);
				}
				break;
			case FUNC:
				EnterOuterAlt(_localctx, 4);
				{
				State = 159; cfunction();
				}
				break;
			case SCAN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 160; input();
				}
				break;
			case MATH:
				EnterOuterAlt(_localctx, 6);
				{
				State = 161; umath();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UifContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(SimpleGrammarParser.IF, 0); }
		public ITerminalNode OPEN() { return GetToken(SimpleGrammarParser.OPEN, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(SimpleGrammarParser.CLOSE, 0); }
		public ITerminalNode OPENB() { return GetToken(SimpleGrammarParser.OPENB, 0); }
		public ProgContext prog() {
			return GetRuleContext<ProgContext>(0);
		}
		public ITerminalNode CLOSEB() { return GetToken(SimpleGrammarParser.CLOSEB, 0); }
		public UifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uif; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.EnterUif(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.ExitUif(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleGrammarVisitor<TResult> typedVisitor = visitor as ISimpleGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUif(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UifContext uif() {
		UifContext _localctx = new UifContext(Context, State);
		EnterRule(_localctx, 30, RULE_uif);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164; Match(IF);
			State = 165; Match(OPEN);
			State = 166; condition();
			State = 167; Match(CLOSE);
			State = 168; Match(OPENB);
			State = 169; prog();
			State = 170; Match(CLOSEB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public CompContext comp() {
			return GetRuleContext<CompContext>(0);
		}
		public OtherContext other() {
			return GetRuleContext<OtherContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleGrammarVisitor<TResult> typedVisitor = visitor as ISimpleGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 32, RULE_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172; expr();
			State = 173; comp();
			State = 174; expr();
			State = 175; other();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompContext : ParserRuleContext {
		public ITerminalNode DEQUAL() { return GetToken(SimpleGrammarParser.DEQUAL, 0); }
		public ITerminalNode BIGGER() { return GetToken(SimpleGrammarParser.BIGGER, 0); }
		public ITerminalNode SMALLER() { return GetToken(SimpleGrammarParser.SMALLER, 0); }
		public ITerminalNode BEQUAL() { return GetToken(SimpleGrammarParser.BEQUAL, 0); }
		public ITerminalNode SMEQUAL() { return GetToken(SimpleGrammarParser.SMEQUAL, 0); }
		public ITerminalNode NEQUAL() { return GetToken(SimpleGrammarParser.NEQUAL, 0); }
		public CompContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.EnterComp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.ExitComp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleGrammarVisitor<TResult> typedVisitor = visitor as ISimpleGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompContext comp() {
		CompContext _localctx = new CompContext(Context, State);
		EnterRule(_localctx, 34, RULE_comp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DEQUAL) | (1L << BIGGER) | (1L << SMALLER) | (1L << BEQUAL) | (1L << SMEQUAL) | (1L << NEQUAL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherContext : ParserRuleContext {
		public ITerminalNode AND() { return GetToken(SimpleGrammarParser.AND, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode OR() { return GetToken(SimpleGrammarParser.OR, 0); }
		public OtherContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_other; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.EnterOther(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.ExitOther(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleGrammarVisitor<TResult> typedVisitor = visitor as ISimpleGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOther(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OtherContext other() {
		OtherContext _localctx = new OtherContext(Context, State);
		EnterRule(_localctx, 36, RULE_other);
		try {
			State = 184;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
				EnterOuterAlt(_localctx, 1);
				{
				State = 179; Match(AND);
				State = 180; condition();
				}
				break;
			case OR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 181; Match(OR);
				State = 182; condition();
				}
				break;
			case CLOSE:
			case EOL:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UelseContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(SimpleGrammarParser.ELSE, 0); }
		public ITerminalNode OPENB() { return GetToken(SimpleGrammarParser.OPENB, 0); }
		public ProgContext prog() {
			return GetRuleContext<ProgContext>(0);
		}
		public ITerminalNode CLOSEB() { return GetToken(SimpleGrammarParser.CLOSEB, 0); }
		public UelseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uelse; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.EnterUelse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.ExitUelse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleGrammarVisitor<TResult> typedVisitor = visitor as ISimpleGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUelse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UelseContext uelse() {
		UelseContext _localctx = new UelseContext(Context, State);
		EnterRule(_localctx, 38, RULE_uelse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186; Match(ELSE);
			State = 187; Match(OPENB);
			State = 188; prog();
			State = 189; Match(CLOSEB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UwhileContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(SimpleGrammarParser.WHILE, 0); }
		public ITerminalNode OPEN() { return GetToken(SimpleGrammarParser.OPEN, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(SimpleGrammarParser.CLOSE, 0); }
		public ITerminalNode OPENB() { return GetToken(SimpleGrammarParser.OPENB, 0); }
		public ProgContext prog() {
			return GetRuleContext<ProgContext>(0);
		}
		public ITerminalNode CLOSEB() { return GetToken(SimpleGrammarParser.CLOSEB, 0); }
		public UwhileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uwhile; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.EnterUwhile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.ExitUwhile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleGrammarVisitor<TResult> typedVisitor = visitor as ISimpleGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUwhile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UwhileContext uwhile() {
		UwhileContext _localctx = new UwhileContext(Context, State);
		EnterRule(_localctx, 40, RULE_uwhile);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191; Match(WHILE);
			State = 192; Match(OPEN);
			State = 193; condition();
			State = 194; Match(CLOSE);
			State = 195; Match(OPENB);
			State = 196; prog();
			State = 197; Match(CLOSEB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UforContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(SimpleGrammarParser.FOR, 0); }
		public ITerminalNode OPEN() { return GetToken(SimpleGrammarParser.OPEN, 0); }
		public DeclContext decl() {
			return GetRuleContext<DeclContext>(0);
		}
		public ITerminalNode[] EOL() { return GetTokens(SimpleGrammarParser.EOL); }
		public ITerminalNode EOL(int i) {
			return GetToken(SimpleGrammarParser.EOL, i);
		}
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode VAR() { return GetToken(SimpleGrammarParser.VAR, 0); }
		public IncrContext incr() {
			return GetRuleContext<IncrContext>(0);
		}
		public UforContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ufor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.EnterUfor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.ExitUfor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleGrammarVisitor<TResult> typedVisitor = visitor as ISimpleGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUfor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UforContext ufor() {
		UforContext _localctx = new UforContext(Context, State);
		EnterRule(_localctx, 42, RULE_ufor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199; Match(FOR);
			State = 200; Match(OPEN);
			State = 201; decl();
			State = 202; Match(EOL);
			State = 203; condition();
			State = 204; Match(EOL);
			State = 205; Match(VAR);
			State = 206; incr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclContext : ParserRuleContext {
		public ITerminalNode TYPE() { return GetToken(SimpleGrammarParser.TYPE, 0); }
		public ITerminalNode VAR() { return GetToken(SimpleGrammarParser.VAR, 0); }
		public ITerminalNode EQUAL() { return GetToken(SimpleGrammarParser.EQUAL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.EnterDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.ExitDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleGrammarVisitor<TResult> typedVisitor = visitor as ISimpleGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclContext decl() {
		DeclContext _localctx = new DeclContext(Context, State);
		EnterRule(_localctx, 44, RULE_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208; Match(TYPE);
			State = 209; Match(VAR);
			State = 210; Match(EQUAL);
			State = 211; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncrContext : ParserRuleContext {
		public ITerminalNode DSUM() { return GetToken(SimpleGrammarParser.DSUM, 0); }
		public ITerminalNode DSUB() { return GetToken(SimpleGrammarParser.DSUB, 0); }
		public IncrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.EnterIncr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.ExitIncr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleGrammarVisitor<TResult> typedVisitor = visitor as ISimpleGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncrContext incr() {
		IncrContext _localctx = new IncrContext(Context, State);
		EnterRule(_localctx, 46, RULE_incr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			_la = TokenStream.LA(1);
			if ( !(_la==DSUM || _la==DSUB) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public ITerminalNode TYPE() { return GetToken(SimpleGrammarParser.TYPE, 0); }
		public ITerminalNode FUNC() { return GetToken(SimpleGrammarParser.FUNC, 0); }
		public ITerminalNode OPEN() { return GetToken(SimpleGrammarParser.OPEN, 0); }
		public ParContext par() {
			return GetRuleContext<ParContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(SimpleGrammarParser.CLOSE, 0); }
		public ITerminalNode OPENB() { return GetToken(SimpleGrammarParser.OPENB, 0); }
		public CodeContext code() {
			return GetRuleContext<CodeContext>(0);
		}
		public ITerminalNode CLOSEB() { return GetToken(SimpleGrammarParser.CLOSEB, 0); }
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleGrammarVisitor<TResult> typedVisitor = visitor as ISimpleGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 48, RULE_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215; Match(TYPE);
			State = 216; Match(FUNC);
			State = 217; Match(OPEN);
			State = 218; par();
			State = 219; Match(CLOSE);
			State = 220; Match(OPENB);
			State = 221; code();
			State = 222; Match(CLOSEB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParContext : ParserRuleContext {
		public ITerminalNode TYPE() { return GetToken(SimpleGrammarParser.TYPE, 0); }
		public ITerminalNode VAR() { return GetToken(SimpleGrammarParser.VAR, 0); }
		public ITerminalNode COMA() { return GetToken(SimpleGrammarParser.COMA, 0); }
		public ParContext par() {
			return GetRuleContext<ParContext>(0);
		}
		public ParContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_par; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.EnterPar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.ExitPar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleGrammarVisitor<TResult> typedVisitor = visitor as ISimpleGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParContext par() {
		ParContext _localctx = new ParContext(Context, State);
		EnterRule(_localctx, 50, RULE_par);
		try {
			State = 231;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 224; Match(TYPE);
				State = 225; Match(VAR);
				State = 226; Match(COMA);
				State = 227; par();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 228; Match(TYPE);
				State = 229; Match(VAR);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CfunctionContext : ParserRuleContext {
		public ITerminalNode FUNC() { return GetToken(SimpleGrammarParser.FUNC, 0); }
		public ITerminalNode OPEN() { return GetToken(SimpleGrammarParser.OPEN, 0); }
		public CparContext cpar() {
			return GetRuleContext<CparContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(SimpleGrammarParser.CLOSE, 0); }
		public CfunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cfunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.EnterCfunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.ExitCfunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleGrammarVisitor<TResult> typedVisitor = visitor as ISimpleGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCfunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CfunctionContext cfunction() {
		CfunctionContext _localctx = new CfunctionContext(Context, State);
		EnterRule(_localctx, 52, RULE_cfunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233; Match(FUNC);
			State = 234; Match(OPEN);
			State = 235; cpar();
			State = 236; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CparContext : ParserRuleContext {
		public ITerminalNode VAR() { return GetToken(SimpleGrammarParser.VAR, 0); }
		public ITerminalNode COMA() { return GetToken(SimpleGrammarParser.COMA, 0); }
		public CparContext cpar() {
			return GetRuleContext<CparContext>(0);
		}
		public CparContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cpar; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.EnterCpar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.ExitCpar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleGrammarVisitor<TResult> typedVisitor = visitor as ISimpleGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCpar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CparContext cpar() {
		CparContext _localctx = new CparContext(Context, State);
		EnterRule(_localctx, 54, RULE_cpar);
		try {
			State = 242;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 238; Match(VAR);
				State = 239; Match(COMA);
				State = 240; cpar();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 241; Match(VAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputContext : ParserRuleContext {
		public ITerminalNode SCAN() { return GetToken(SimpleGrammarParser.SCAN, 0); }
		public ITerminalNode OPEN() { return GetToken(SimpleGrammarParser.OPEN, 0); }
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(SimpleGrammarParser.CLOSE, 0); }
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.EnterInput(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.ExitInput(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleGrammarVisitor<TResult> typedVisitor = visitor as ISimpleGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(Context, State);
		EnterRule(_localctx, 56, RULE_input);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244; Match(SCAN);
			State = 245; Match(OPEN);
			State = 246; value();
			State = 247; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(SimpleGrammarParser.STRING, 0); }
		public ITerminalNode INT() { return GetToken(SimpleGrammarParser.INT, 0); }
		public ITerminalNode FLOAT() { return GetToken(SimpleGrammarParser.FLOAT, 0); }
		public ITerminalNode CHAR() { return GetToken(SimpleGrammarParser.CHAR, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleGrammarVisitor<TResult> typedVisitor = visitor as ISimpleGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 58, RULE_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING) | (1L << INT) | (1L << FLOAT) | (1L << CHAR))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UmathContext : ParserRuleContext {
		public ITerminalNode MATH() { return GetToken(SimpleGrammarParser.MATH, 0); }
		public ITerminalNode PONT() { return GetToken(SimpleGrammarParser.PONT, 0); }
		public MathparContext mathpar() {
			return GetRuleContext<MathparContext>(0);
		}
		public UmathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_umath; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.EnterUmath(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.ExitUmath(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleGrammarVisitor<TResult> typedVisitor = visitor as ISimpleGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUmath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UmathContext umath() {
		UmathContext _localctx = new UmathContext(Context, State);
		EnterRule(_localctx, 60, RULE_umath);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251; Match(MATH);
			State = 252; Match(PONT);
			State = 253; mathpar();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MathparContext : ParserRuleContext {
		public FloorContext floor() {
			return GetRuleContext<FloorContext>(0);
		}
		public CeilContext ceil() {
			return GetRuleContext<CeilContext>(0);
		}
		public SqrtContext sqrt() {
			return GetRuleContext<SqrtContext>(0);
		}
		public PotContext pot() {
			return GetRuleContext<PotContext>(0);
		}
		public FmaxContext fmax() {
			return GetRuleContext<FmaxContext>(0);
		}
		public FminContext fmin() {
			return GetRuleContext<FminContext>(0);
		}
		public RintContext rint() {
			return GetRuleContext<RintContext>(0);
		}
		public MathparContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mathpar; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.EnterMathpar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.ExitMathpar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleGrammarVisitor<TResult> typedVisitor = visitor as ISimpleGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMathpar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MathparContext mathpar() {
		MathparContext _localctx = new MathparContext(Context, State);
		EnterRule(_localctx, 62, RULE_mathpar);
		try {
			State = 262;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FLOOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 255; floor();
				}
				break;
			case CEIL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 256; ceil();
				}
				break;
			case SQRT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 257; sqrt();
				}
				break;
			case POT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 258; pot();
				}
				break;
			case FMAX:
				EnterOuterAlt(_localctx, 5);
				{
				State = 259; fmax();
				}
				break;
			case FMIN:
				EnterOuterAlt(_localctx, 6);
				{
				State = 260; fmin();
				}
				break;
			case RINT:
				EnterOuterAlt(_localctx, 7);
				{
				State = 261; rint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloorContext : ParserRuleContext {
		public ITerminalNode FLOOR() { return GetToken(SimpleGrammarParser.FLOOR, 0); }
		public ITerminalNode OPEN() { return GetToken(SimpleGrammarParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(SimpleGrammarParser.CLOSE, 0); }
		public FloorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.EnterFloor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.ExitFloor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleGrammarVisitor<TResult> typedVisitor = visitor as ISimpleGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloorContext floor() {
		FloorContext _localctx = new FloorContext(Context, State);
		EnterRule(_localctx, 64, RULE_floor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264; Match(FLOOR);
			State = 265; Match(OPEN);
			State = 266; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CeilContext : ParserRuleContext {
		public ITerminalNode CEIL() { return GetToken(SimpleGrammarParser.CEIL, 0); }
		public ITerminalNode OPEN() { return GetToken(SimpleGrammarParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(SimpleGrammarParser.CLOSE, 0); }
		public CeilContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ceil; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.EnterCeil(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.ExitCeil(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleGrammarVisitor<TResult> typedVisitor = visitor as ISimpleGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCeil(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CeilContext ceil() {
		CeilContext _localctx = new CeilContext(Context, State);
		EnterRule(_localctx, 66, RULE_ceil);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268; Match(CEIL);
			State = 269; Match(OPEN);
			State = 270; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SqrtContext : ParserRuleContext {
		public ITerminalNode SQRT() { return GetToken(SimpleGrammarParser.SQRT, 0); }
		public ITerminalNode OPEN() { return GetToken(SimpleGrammarParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(SimpleGrammarParser.CLOSE, 0); }
		public SqrtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sqrt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.EnterSqrt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.ExitSqrt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleGrammarVisitor<TResult> typedVisitor = visitor as ISimpleGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSqrt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SqrtContext sqrt() {
		SqrtContext _localctx = new SqrtContext(Context, State);
		EnterRule(_localctx, 68, RULE_sqrt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272; Match(SQRT);
			State = 273; Match(OPEN);
			State = 274; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PotContext : ParserRuleContext {
		public ITerminalNode POT() { return GetToken(SimpleGrammarParser.POT, 0); }
		public ITerminalNode OPEN() { return GetToken(SimpleGrammarParser.OPEN, 0); }
		public ITerminalNode[] NUM() { return GetTokens(SimpleGrammarParser.NUM); }
		public ITerminalNode NUM(int i) {
			return GetToken(SimpleGrammarParser.NUM, i);
		}
		public ITerminalNode COMA() { return GetToken(SimpleGrammarParser.COMA, 0); }
		public ITerminalNode CLOSE() { return GetToken(SimpleGrammarParser.CLOSE, 0); }
		public PotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pot; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.EnterPot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.ExitPot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleGrammarVisitor<TResult> typedVisitor = visitor as ISimpleGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PotContext pot() {
		PotContext _localctx = new PotContext(Context, State);
		EnterRule(_localctx, 70, RULE_pot);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276; Match(POT);
			State = 277; Match(OPEN);
			State = 278; Match(NUM);
			State = 279; Match(COMA);
			State = 280; Match(NUM);
			State = 281; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FmaxContext : ParserRuleContext {
		public ITerminalNode FMAX() { return GetToken(SimpleGrammarParser.FMAX, 0); }
		public ITerminalNode OPEN() { return GetToken(SimpleGrammarParser.OPEN, 0); }
		public ITerminalNode[] NUM() { return GetTokens(SimpleGrammarParser.NUM); }
		public ITerminalNode NUM(int i) {
			return GetToken(SimpleGrammarParser.NUM, i);
		}
		public ITerminalNode COMA() { return GetToken(SimpleGrammarParser.COMA, 0); }
		public ITerminalNode CLOSE() { return GetToken(SimpleGrammarParser.CLOSE, 0); }
		public FmaxContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fmax; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.EnterFmax(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.ExitFmax(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleGrammarVisitor<TResult> typedVisitor = visitor as ISimpleGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFmax(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FmaxContext fmax() {
		FmaxContext _localctx = new FmaxContext(Context, State);
		EnterRule(_localctx, 72, RULE_fmax);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283; Match(FMAX);
			State = 284; Match(OPEN);
			State = 285; Match(NUM);
			State = 286; Match(COMA);
			State = 287; Match(NUM);
			State = 288; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FminContext : ParserRuleContext {
		public ITerminalNode FMIN() { return GetToken(SimpleGrammarParser.FMIN, 0); }
		public ITerminalNode OPEN() { return GetToken(SimpleGrammarParser.OPEN, 0); }
		public ITerminalNode[] NUM() { return GetTokens(SimpleGrammarParser.NUM); }
		public ITerminalNode NUM(int i) {
			return GetToken(SimpleGrammarParser.NUM, i);
		}
		public ITerminalNode COMA() { return GetToken(SimpleGrammarParser.COMA, 0); }
		public ITerminalNode CLOSE() { return GetToken(SimpleGrammarParser.CLOSE, 0); }
		public FminContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fmin; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.EnterFmin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.ExitFmin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleGrammarVisitor<TResult> typedVisitor = visitor as ISimpleGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFmin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FminContext fmin() {
		FminContext _localctx = new FminContext(Context, State);
		EnterRule(_localctx, 74, RULE_fmin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 290; Match(FMIN);
			State = 291; Match(OPEN);
			State = 292; Match(NUM);
			State = 293; Match(COMA);
			State = 294; Match(NUM);
			State = 295; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RintContext : ParserRuleContext {
		public ITerminalNode RINT() { return GetToken(SimpleGrammarParser.RINT, 0); }
		public ITerminalNode OPEN() { return GetToken(SimpleGrammarParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(SimpleGrammarParser.CLOSE, 0); }
		public RintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.EnterRint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleGrammarListener typedListener = listener as ISimpleGrammarListener;
			if (typedListener != null) typedListener.ExitRint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleGrammarVisitor<TResult> typedVisitor = visitor as ISimpleGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RintContext rint() {
		RintContext _localctx = new RintContext(Context, State);
		EnterRule(_localctx, 76, RULE_rint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297; Match(RINT);
			State = 298; Match(OPEN);
			State = 299; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x32', '\x130', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x5', '\x3', 'W', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x5', '\x4', '\\', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x5', '\a', 'm', '\n', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', 
		'\b', 'v', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x5', '\t', 'z', '\n', 
		'\t', '\x3', '\n', '\x3', '\n', '\x5', '\n', '~', '\n', '\n', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x5', '\v', '\x83', '\n', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x89', '\n', '\f', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', 
		'\r', '\x90', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', 
		'\xF', '\x9A', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x5', '\x10', '\xA5', '\n', '\x10', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\xBB', 
		'\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x5', '\x1B', '\xEA', '\n', '\x1B', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', '\xF5', '\n', '\x1D', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', 
		'!', '\x3', '!', '\x5', '!', '\x109', '\n', '!', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', 
		'\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '%', '\x3', '%', 
		'\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '&', 
		'\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', 
		'\'', '\x3', '\'', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', 
		'(', '\x2', '\x2', ')', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', 
		'$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', 
		':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', '\x2', 
		'\x5', '\x4', '\x2', '$', '$', '\'', '+', '\x3', '\x2', '%', '&', '\x3', 
		'\x2', '\n', '\r', '\x2', '\x126', '\x2', 'P', '\x3', '\x2', '\x2', '\x2', 
		'\x4', 'V', '\x3', '\x2', '\x2', '\x2', '\x6', '[', '\x3', '\x2', '\x2', 
		'\x2', '\b', ']', '\x3', '\x2', '\x2', '\x2', '\n', '\x63', '\x3', '\x2', 
		'\x2', '\x2', '\f', 'l', '\x3', '\x2', '\x2', '\x2', '\xE', 'u', '\x3', 
		'\x2', '\x2', '\x2', '\x10', 'y', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'}', '\x3', '\x2', '\x2', '\x2', '\x14', '\x82', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\x88', '\x3', '\x2', '\x2', '\x2', '\x18', '\x8F', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\x91', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\x99', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xA4', '\x3', '\x2', '\x2', 
		'\x2', ' ', '\xA6', '\x3', '\x2', '\x2', '\x2', '\"', '\xAE', '\x3', '\x2', 
		'\x2', '\x2', '$', '\xB3', '\x3', '\x2', '\x2', '\x2', '&', '\xBA', '\x3', 
		'\x2', '\x2', '\x2', '(', '\xBC', '\x3', '\x2', '\x2', '\x2', '*', '\xC1', 
		'\x3', '\x2', '\x2', '\x2', ',', '\xC9', '\x3', '\x2', '\x2', '\x2', '.', 
		'\xD2', '\x3', '\x2', '\x2', '\x2', '\x30', '\xD7', '\x3', '\x2', '\x2', 
		'\x2', '\x32', '\xD9', '\x3', '\x2', '\x2', '\x2', '\x34', '\xE9', '\x3', 
		'\x2', '\x2', '\x2', '\x36', '\xEB', '\x3', '\x2', '\x2', '\x2', '\x38', 
		'\xF4', '\x3', '\x2', '\x2', '\x2', ':', '\xF6', '\x3', '\x2', '\x2', 
		'\x2', '<', '\xFB', '\x3', '\x2', '\x2', '\x2', '>', '\xFD', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x108', '\x3', '\x2', '\x2', '\x2', '\x42', '\x10A', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x10E', '\x3', '\x2', '\x2', '\x2', 
		'\x46', '\x112', '\x3', '\x2', '\x2', '\x2', 'H', '\x116', '\x3', '\x2', 
		'\x2', '\x2', 'J', '\x11D', '\x3', '\x2', '\x2', '\x2', 'L', '\x124', 
		'\x3', '\x2', '\x2', '\x2', 'N', '\x12B', '\x3', '\x2', '\x2', '\x2', 
		'P', 'Q', '\x5', '\x6', '\x4', '\x2', 'Q', 'R', '\a', '\"', '\x2', '\x2', 
		'R', 'S', '\x5', '\x4', '\x3', '\x2', 'S', '\x3', '\x3', '\x2', '\x2', 
		'\x2', 'T', 'W', '\x5', '\x2', '\x2', '\x2', 'U', 'W', '\x3', '\x2', '\x2', 
		'\x2', 'V', 'T', '\x3', '\x2', '\x2', '\x2', 'V', 'U', '\x3', '\x2', '\x2', 
		'\x2', 'W', '\x5', '\x3', '\x2', '\x2', '\x2', 'X', '\\', '\x5', '\b', 
		'\x5', '\x2', 'Y', '\\', '\x5', '\n', '\x6', '\x2', 'Z', '\\', '\x5', 
		' ', '\x11', '\x2', '[', 'X', '\x3', '\x2', '\x2', '\x2', '[', 'Y', '\x3', 
		'\x2', '\x2', '\x2', '[', 'Z', '\x3', '\x2', '\x2', '\x2', '\\', '\a', 
		'\x3', '\x2', '\x2', '\x2', ']', '^', '\x5', '\x10', '\t', '\x2', '^', 
		'_', '\a', '/', '\x2', '\x2', '_', '`', '\x5', '\x12', '\n', '\x2', '`', 
		'\x61', '\x5', '\x16', '\f', '\x2', '\x61', '\x62', '\x5', '\x14', '\v', 
		'\x2', '\x62', '\t', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\a', 
		'\x3', '\x2', '\x2', '\x64', '\x65', '\a', '\x18', '\x2', '\x2', '\x65', 
		'\x66', '\x5', '\f', '\a', '\x2', '\x66', 'g', '\a', '\x19', '\x2', '\x2', 
		'g', '\v', '\x3', '\x2', '\x2', '\x2', 'h', 'i', '\a', '\n', '\x2', '\x2', 
		'i', 'm', '\x5', '\xE', '\b', '\x2', 'j', 'k', '\a', '/', '\x2', '\x2', 
		'k', 'm', '\x5', '\xE', '\b', '\x2', 'l', 'h', '\x3', '\x2', '\x2', '\x2', 
		'l', 'j', '\x3', '\x2', '\x2', '\x2', 'm', '\r', '\x3', '\x2', '\x2', 
		'\x2', 'n', 'o', '\a', '\x1C', '\x2', '\x2', 'o', 'p', '\a', '\n', '\x2', 
		'\x2', 'p', 'v', '\x5', '\xE', '\b', '\x2', 'q', 'r', '\a', '\x1C', '\x2', 
		'\x2', 'r', 's', '\a', '/', '\x2', '\x2', 's', 'v', '\x5', '\xE', '\b', 
		'\x2', 't', 'v', '\x3', '\x2', '\x2', '\x2', 'u', 'n', '\x3', '\x2', '\x2', 
		'\x2', 'u', 'q', '\x3', '\x2', '\x2', '\x2', 'u', 't', '\x3', '\x2', '\x2', 
		'\x2', 'v', '\xF', '\x3', '\x2', '\x2', '\x2', 'w', 'z', '\a', '\xE', 
		'\x2', '\x2', 'x', 'z', '\x3', '\x2', '\x2', '\x2', 'y', 'w', '\x3', '\x2', 
		'\x2', '\x2', 'y', 'x', '\x3', '\x2', '\x2', '\x2', 'z', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '{', '~', '\a', '#', '\x2', '\x2', '|', '~', '\x3', 
		'\x2', '\x2', '\x2', '}', '{', '\x3', '\x2', '\x2', '\x2', '}', '|', '\x3', 
		'\x2', '\x2', '\x2', '~', '\x13', '\x3', '\x2', '\x2', '\x2', '\x7F', 
		'\x80', '\a', '!', '\x2', '\x2', '\x80', '\x83', '\x5', '\b', '\x5', '\x2', 
		'\x81', '\x83', '\x3', '\x2', '\x2', '\x2', '\x82', '\x7F', '\x3', '\x2', 
		'\x2', '\x2', '\x82', '\x81', '\x3', '\x2', '\x2', '\x2', '\x83', '\x15', 
		'\x3', '\x2', '\x2', '\x2', '\x84', '\x85', '\x5', '\x1A', '\xE', '\x2', 
		'\x85', '\x86', '\x5', '\x18', '\r', '\x2', '\x86', '\x89', '\x3', '\x2', 
		'\x2', '\x2', '\x87', '\x89', '\x3', '\x2', '\x2', '\x2', '\x88', '\x84', 
		'\x3', '\x2', '\x2', '\x2', '\x88', '\x87', '\x3', '\x2', '\x2', '\x2', 
		'\x89', '\x17', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8B', '\a', '\x1C', 
		'\x2', '\x2', '\x8B', '\x90', '\x5', '\x16', '\f', '\x2', '\x8C', '\x8D', 
		'\a', '\x1D', '\x2', '\x2', '\x8D', '\x90', '\x5', '\x16', '\f', '\x2', 
		'\x8E', '\x90', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x8A', '\x3', '\x2', 
		'\x2', '\x2', '\x8F', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x8E', 
		'\x3', '\x2', '\x2', '\x2', '\x90', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x91', '\x92', '\x5', '\x1E', '\x10', '\x2', '\x92', '\x93', '\x5', '\x1C', 
		'\xF', '\x2', '\x93', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x94', '\x95', 
		'\a', '\x1E', '\x2', '\x2', '\x95', '\x9A', '\x5', '\x1A', '\xE', '\x2', 
		'\x96', '\x97', '\a', '\x1F', '\x2', '\x2', '\x97', '\x9A', '\x5', '\x1A', 
		'\xE', '\x2', '\x98', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x99', '\x94', 
		'\x3', '\x2', '\x2', '\x2', '\x99', '\x96', '\x3', '\x2', '\x2', '\x2', 
		'\x99', '\x98', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\x9B', '\x9C', '\a', '\x18', '\x2', '\x2', '\x9C', '\x9D', 
		'\x5', '\x16', '\f', '\x2', '\x9D', '\x9E', '\a', '\x19', '\x2', '\x2', 
		'\x9E', '\xA5', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA5', '\a', '.', 
		'\x2', '\x2', '\xA0', '\xA5', '\a', '/', '\x2', '\x2', '\xA1', '\xA5', 
		'\x5', '\x36', '\x1C', '\x2', '\xA2', '\xA5', '\x5', ':', '\x1E', '\x2', 
		'\xA3', '\xA5', '\x5', '>', ' ', '\x2', '\xA4', '\x9B', '\x3', '\x2', 
		'\x2', '\x2', '\xA4', '\x9F', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA0', 
		'\x3', '\x2', '\x2', '\x2', '\xA4', '\xA1', '\x3', '\x2', '\x2', '\x2', 
		'\xA4', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA3', '\x3', '\x2', 
		'\x2', '\x2', '\xA5', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA7', 
		'\a', '\x6', '\x2', '\x2', '\xA7', '\xA8', '\a', '\x18', '\x2', '\x2', 
		'\xA8', '\xA9', '\x5', '\"', '\x12', '\x2', '\xA9', '\xAA', '\a', '\x19', 
		'\x2', '\x2', '\xAA', '\xAB', '\a', '\x1A', '\x2', '\x2', '\xAB', '\xAC', 
		'\x5', '\x2', '\x2', '\x2', '\xAC', '\xAD', '\a', '\x1B', '\x2', '\x2', 
		'\xAD', '!', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xAF', '\x5', '\x16', 
		'\f', '\x2', '\xAF', '\xB0', '\x5', '$', '\x13', '\x2', '\xB0', '\xB1', 
		'\x5', '\x16', '\f', '\x2', '\xB1', '\xB2', '\x5', '&', '\x14', '\x2', 
		'\xB2', '#', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB4', '\t', '\x2', 
		'\x2', '\x2', '\xB4', '%', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB6', 
		'\a', ',', '\x2', '\x2', '\xB6', '\xBB', '\x5', '\"', '\x12', '\x2', '\xB7', 
		'\xB8', '\a', '-', '\x2', '\x2', '\xB8', '\xBB', '\x5', '\"', '\x12', 
		'\x2', '\xB9', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xB5', '\x3', 
		'\x2', '\x2', '\x2', '\xBA', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xBA', 
		'\xB9', '\x3', '\x2', '\x2', '\x2', '\xBB', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\xBC', '\xBD', '\a', '\a', '\x2', '\x2', '\xBD', '\xBE', '\a', 
		'\x1A', '\x2', '\x2', '\xBE', '\xBF', '\x5', '\x2', '\x2', '\x2', '\xBF', 
		'\xC0', '\a', '\x1B', '\x2', '\x2', '\xC0', ')', '\x3', '\x2', '\x2', 
		'\x2', '\xC1', '\xC2', '\a', '\t', '\x2', '\x2', '\xC2', '\xC3', '\a', 
		'\x18', '\x2', '\x2', '\xC3', '\xC4', '\x5', '\"', '\x12', '\x2', '\xC4', 
		'\xC5', '\a', '\x19', '\x2', '\x2', '\xC5', '\xC6', '\a', '\x1A', '\x2', 
		'\x2', '\xC6', '\xC7', '\x5', '\x2', '\x2', '\x2', '\xC7', '\xC8', '\a', 
		'\x1B', '\x2', '\x2', '\xC8', '+', '\x3', '\x2', '\x2', '\x2', '\xC9', 
		'\xCA', '\a', '\b', '\x2', '\x2', '\xCA', '\xCB', '\a', '\x18', '\x2', 
		'\x2', '\xCB', '\xCC', '\x5', '.', '\x18', '\x2', '\xCC', '\xCD', '\a', 
		'\"', '\x2', '\x2', '\xCD', '\xCE', '\x5', '\"', '\x12', '\x2', '\xCE', 
		'\xCF', '\a', '\"', '\x2', '\x2', '\xCF', '\xD0', '\a', '/', '\x2', '\x2', 
		'\xD0', '\xD1', '\x5', '\x30', '\x19', '\x2', '\xD1', '-', '\x3', '\x2', 
		'\x2', '\x2', '\xD2', '\xD3', '\a', '\xE', '\x2', '\x2', '\xD3', '\xD4', 
		'\a', '/', '\x2', '\x2', '\xD4', '\xD5', '\a', '#', '\x2', '\x2', '\xD5', 
		'\xD6', '\x5', '\x16', '\f', '\x2', '\xD6', '/', '\x3', '\x2', '\x2', 
		'\x2', '\xD7', '\xD8', '\t', '\x3', '\x2', '\x2', '\xD8', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\xD9', '\xDA', '\a', '\xE', '\x2', '\x2', '\xDA', 
		'\xDB', '\a', '\x5', '\x2', '\x2', '\xDB', '\xDC', '\a', '\x18', '\x2', 
		'\x2', '\xDC', '\xDD', '\x5', '\x34', '\x1B', '\x2', '\xDD', '\xDE', '\a', 
		'\x19', '\x2', '\x2', '\xDE', '\xDF', '\a', '\x1A', '\x2', '\x2', '\xDF', 
		'\xE0', '\x5', '\x6', '\x4', '\x2', '\xE0', '\xE1', '\a', '\x1B', '\x2', 
		'\x2', '\xE1', '\x33', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE3', '\a', 
		'\xE', '\x2', '\x2', '\xE3', '\xE4', '\a', '/', '\x2', '\x2', '\xE4', 
		'\xE5', '\a', '!', '\x2', '\x2', '\xE5', '\xEA', '\x5', '\x34', '\x1B', 
		'\x2', '\xE6', '\xE7', '\a', '\xE', '\x2', '\x2', '\xE7', '\xEA', '\a', 
		'/', '\x2', '\x2', '\xE8', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xE9', 
		'\xE2', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xE6', '\x3', '\x2', '\x2', 
		'\x2', '\xE9', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xEA', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\xEB', '\xEC', '\a', '\x5', '\x2', '\x2', '\xEC', 
		'\xED', '\a', '\x18', '\x2', '\x2', '\xED', '\xEE', '\x5', '\x38', '\x1D', 
		'\x2', '\xEE', '\xEF', '\a', '\x19', '\x2', '\x2', '\xEF', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\xF0', '\xF1', '\a', '/', '\x2', '\x2', '\xF1', 
		'\xF2', '\a', '!', '\x2', '\x2', '\xF2', '\xF5', '\x5', '\x38', '\x1D', 
		'\x2', '\xF3', '\xF5', '\a', '/', '\x2', '\x2', '\xF4', '\xF0', '\x3', 
		'\x2', '\x2', '\x2', '\xF4', '\xF3', '\x3', '\x2', '\x2', '\x2', '\xF5', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF7', '\a', '\x4', '\x2', 
		'\x2', '\xF7', '\xF8', '\a', '\x18', '\x2', '\x2', '\xF8', '\xF9', '\x5', 
		'<', '\x1F', '\x2', '\xF9', '\xFA', '\a', '\x19', '\x2', '\x2', '\xFA', 
		';', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xFC', '\t', '\x4', '\x2', '\x2', 
		'\xFC', '=', '\x3', '\x2', '\x2', '\x2', '\xFD', '\xFE', '\a', '\xF', 
		'\x2', '\x2', '\xFE', '\xFF', '\a', '\x17', '\x2', '\x2', '\xFF', '\x100', 
		'\x5', '@', '!', '\x2', '\x100', '?', '\x3', '\x2', '\x2', '\x2', '\x101', 
		'\x109', '\x5', '\x42', '\"', '\x2', '\x102', '\x109', '\x5', '\x44', 
		'#', '\x2', '\x103', '\x109', '\x5', '\x46', '$', '\x2', '\x104', '\x109', 
		'\x5', 'H', '%', '\x2', '\x105', '\x109', '\x5', 'J', '&', '\x2', '\x106', 
		'\x109', '\x5', 'L', '\'', '\x2', '\x107', '\x109', '\x5', 'N', '(', '\x2', 
		'\x108', '\x101', '\x3', '\x2', '\x2', '\x2', '\x108', '\x102', '\x3', 
		'\x2', '\x2', '\x2', '\x108', '\x103', '\x3', '\x2', '\x2', '\x2', '\x108', 
		'\x104', '\x3', '\x2', '\x2', '\x2', '\x108', '\x105', '\x3', '\x2', '\x2', 
		'\x2', '\x108', '\x106', '\x3', '\x2', '\x2', '\x2', '\x108', '\x107', 
		'\x3', '\x2', '\x2', '\x2', '\x109', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'\x10A', '\x10B', '\a', '\x10', '\x2', '\x2', '\x10B', '\x10C', '\a', 
		'\x18', '\x2', '\x2', '\x10C', '\x10D', '\a', '\x19', '\x2', '\x2', '\x10D', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x10F', '\a', '\x11', '\x2', 
		'\x2', '\x10F', '\x110', '\a', '\x18', '\x2', '\x2', '\x110', '\x111', 
		'\a', '\x19', '\x2', '\x2', '\x111', '\x45', '\x3', '\x2', '\x2', '\x2', 
		'\x112', '\x113', '\a', '\x12', '\x2', '\x2', '\x113', '\x114', '\a', 
		'\x18', '\x2', '\x2', '\x114', '\x115', '\a', '\x19', '\x2', '\x2', '\x115', 
		'G', '\x3', '\x2', '\x2', '\x2', '\x116', '\x117', '\a', '\x13', '\x2', 
		'\x2', '\x117', '\x118', '\a', '\x18', '\x2', '\x2', '\x118', '\x119', 
		'\a', '.', '\x2', '\x2', '\x119', '\x11A', '\a', '!', '\x2', '\x2', '\x11A', 
		'\x11B', '\a', '.', '\x2', '\x2', '\x11B', '\x11C', '\a', '\x19', '\x2', 
		'\x2', '\x11C', 'I', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x11E', '\a', 
		'\x14', '\x2', '\x2', '\x11E', '\x11F', '\a', '\x18', '\x2', '\x2', '\x11F', 
		'\x120', '\a', '.', '\x2', '\x2', '\x120', '\x121', '\a', '!', '\x2', 
		'\x2', '\x121', '\x122', '\a', '.', '\x2', '\x2', '\x122', '\x123', '\a', 
		'\x19', '\x2', '\x2', '\x123', 'K', '\x3', '\x2', '\x2', '\x2', '\x124', 
		'\x125', '\a', '\x15', '\x2', '\x2', '\x125', '\x126', '\a', '\x18', '\x2', 
		'\x2', '\x126', '\x127', '\a', '.', '\x2', '\x2', '\x127', '\x128', '\a', 
		'!', '\x2', '\x2', '\x128', '\x129', '\a', '.', '\x2', '\x2', '\x129', 
		'\x12A', '\a', '\x19', '\x2', '\x2', '\x12A', 'M', '\x3', '\x2', '\x2', 
		'\x2', '\x12B', '\x12C', '\a', '\x16', '\x2', '\x2', '\x12C', '\x12D', 
		'\a', '\x18', '\x2', '\x2', '\x12D', '\x12E', '\a', '\x19', '\x2', '\x2', 
		'\x12E', 'O', '\x3', '\x2', '\x2', '\x2', '\x11', 'V', '[', 'l', 'u', 
		'y', '}', '\x82', '\x88', '\x8F', '\x99', '\xA4', '\xBA', '\xE9', '\xF4', 
		'\x108',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Grammar
